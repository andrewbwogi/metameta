

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.MethodNode;


public class BaseClass implements Opcodes {
    ClassNode cn;

    ClassReader cr;

    ClassWriter cw;

    /**
     * adds the method constructed by SpoonTransformers.constructMethod1
     * in the beginning of each method except constructors in a class
     *
     * @param fileIn
     * 		
     * @param fileOut
     * 		
     * @throws Exception
     * 		
     */
    public void execute(String fileIn, String fileOut) throws Exception {
        readClass(fileIn);
        // add the method call to each method except constructors
        for (MethodNode mn : cn.methods) {
            // Add in which method?
            InsnList il = new InsnList();
            // Add what method call?
            // Add where in method?
        }
        // add the method code. generated by ASMifier
        MethodVisitor mv;
        cn.accept(cw);
        // Add method definition
        cw.visitEnd();
        writeClass(fileOut);
    }

    private void readClass(String fileIn) throws Exception {
        FileInputStream is = new FileInputStream(fileIn);
        cn = new ClassNode();
        cr = new ClassReader(is);
        cr.accept(cn, 0);
        cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    }

    private void writeClass(String fileOut) throws Exception {
        byte[] b = cw.toByteArray();
        new File(fileOut).getParentFile().mkdirs();
        FileOutputStream fos = new FileOutputStream(fileOut);
        fos.write(b);
        fos.close();
    }
}

